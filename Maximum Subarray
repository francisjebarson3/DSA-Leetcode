/*
Given an integer array nums, find the  subarray with the largest sum, and return its sum.

Example 1:
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.

Example 2:
Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.

Example 3:
Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.

*/
class Solution {

    public int maxSubArray(int[] nums) {
       //What is subarrays?
       // consider arry- [1,2,3,4]
       // non empty , contiguous values will present
       // It can be a single element or combination of elements
       // i.e in the above numbers [1,2,3,4] , 
       // opputinuties are 
       // #1 -(1),(2),(3),(4) - smallest sub arrays
       // #2- (1,2) , (2,3), (3,4)
       // #3- (1,2,3) ,(2,3,4) - largest sub arrays
       int max=Integer.MIN_VALUE;
       int currentSum=0;
       for(int value:nums){
         currentSum+=value;
         if(max<currentSum){
           max=currentSum;
         }
         //Consider negative values as 0
         if(currentSum<0){
            currentSum=0;
         }
       }
       return max;
      
    }
}
